/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


#include <behaviors.dtsi>
#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define COLEMAK 1
#define NUM 2
#define NAV 3
#define FUN 4
#define MOUSE 5

#define ZMK_MOUSE_DEFAULT_SCRL_VAL 35

&mmv {
    acceleration-exponent = <1>;      // 1
    time-to-max-speed-ms = <300>;     // 300
    delay-ms = <0>;                   // 0
    trigger-period-ms = <8>;          // 16
};

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <40>;      // 300
    delay-ms = <0>;                   // 0
    trigger-period-ms = <8>;          // 16
};


/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <NUM NAV>;
            then-layer = <FUN>;
        };
    };

    behaviors {
        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        smart_shft: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SHIFT";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;

            mods = <(MOD_LSFT)>;
        };

        comma_semi: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMI";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;

            mods = <(MOD_LSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;

            mods = <(MOD_LSFT)>;
        };

        qmrk_excl: qmrk_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "QUESTION_EXCLAMATION";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;

            mods = <(MOD_LSFT)>;
        };

        slh_morph: slh_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASH_MORPH";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp BSLH>;

            mods = <(MOD_LSFT)>;
        };

        amps_morph: amps_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "AMPERSAND_MORPH";
            #binding-cells = <0>;
            bindings = <&kp AMPS>, <&kp PIPE>;

            mods = <(MOD_LSFT)>;
        };

        apos_quote: apos_quote {
            compatible = "zmk,behavior-mod-morph";
            label = "APOSTROPHE_QUOTATION";
            #binding-cells = <0>;
            bindings = <&kp SQT>, <&kp DOUBLE_QUOTES>;

            mods = <(MOD_LSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        dfcopy {
            bindings = <&kp LC(C)>;
            key-positions = <12 13>;
        };

        erpaste {
            bindings = <&kp LC(V)>;
            key-positions = <2 3>;
        };

        agstickymouse {
            bindings = <&sl 5>;
            key-positions = <10 14>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
  &kp Q  &kp W  &kp E     &kp R    &kp T          &kp Y      &kp U    &kp I      &kp O    &kp P
  &kp A  &kp S  &kp D     &kp F    &kp G          &kp H      &kp J    &kp K      &kp L    &kp SEMI
  &kp Z  &kp X  &kp C     &kp V    &kp B          &kp N      &kp M    &kp COMMA  &dot_colon  &qmrk_excl
                &kp LGUI  &sl NUM  &smart_shft    &kp SPACE  &sl NAV  &bspc_del
            >;
        };

        colemak_layer {
            bindings = <
  &kp Q  &kp W  &kp F   &kp P   &kp B     &kp J   &kp L   &kp U        &kp Y       &kp APOS
  &kp A  &kp R  &kp S   &kp T   &kp G     &kp M   &kp N   &kp E        &kp I       &kp O
  &kp Z  &kp X  &kp C   &kp D   &kp V     &kp K   &kp H   &comma_semi  &dot_colon  &qmrk_excl
                &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        num_layer {
            bindings = <
  &kp GRAVE   &kp AT    &kp LBRC  &kp RBRC  &kp PRCNT    &kp STAR     &kp N7  &kp N8  &kp N9  &kp MINUS
  &kp CARET   &kp HASH  &kp LPAR  &kp RPAR  &kp DLLR     &kp UNDER    &kp N4  &kp N5  &kp N6  &apos_quote
  &slh_morph  &kp LT    &kp LBKT  &kp RBKT  &kp GT       &amps_morph  &kp N1  &kp N2  &kp N3  &kp EQUAL
                        &sl MOUSE    &trans    &trans       &kp N0       &trans  &trans
            >;
        };

        nav_layer {
            bindings = <
  &kp TAB    &kp K_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &kp RA(W)    &trans    &kp HOME  &kp END  &trans     &trans
  &sk LSHFT  &sk LCTRL   &sk LALT      &sk LGUI      &kp RA(A)    &kp LEFT  &kp DOWN  &kp UP   &kp RIGHT  &kp ESC
  &trans     &kp C_PREV  &kp C_PP      &kp C_NEXT    &kp RA(O)    &trans    &kp RET   &trans   &trans     &trans
                         &trans        &trans        &trans       &trans    &trans    &trans
            >;
        };

        fun_layer {
            bindings = <
  &tog MOUSE  &trans        &trans        &sys_reset    &out OUT_TOG    &trans  &kp F7  &kp F8  &kp F9  &kp F12
  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &kp F4  &kp F5  &kp F6  &kp F11
  &trans        &trans        &bt BT_CLR    &trans        &trans          &trans  &kp F1  &kp F2  &kp F3  &kp F10
                              &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };

        mouse_layer {
            bindings = < 
  &trans  &trans  &trans   &trans   &trans     &trans  &trans   &mmv MOVE_UP   &trans  &trans
  &trans  &trans  &trans   &trans   &trans     &mkp RCLK  &mmv MOVE_LEFT   &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans
  &trans  &trans  &trans   &trans   &trans     &msc SCRL_LEFT  &msc SCRL_DOWN   &msc SCRL_UP   &msc SCRL_RIGHT  &trans
                &trans  &trans  &trans         &mkp LCLK &trans  &trans
            >;
        };
    };
};
